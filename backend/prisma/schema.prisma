// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongo"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  name      String
  email     String  @unique @index
  phone     String  @unique @index
  password  String
  role      Role    @default(BUYER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  products  Product[] @relation(name: "VendorProducts") // Only for Vendors
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  subCategories SubCategory[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SubCategory {
  id          String   @id @default(uuid())
  name        String   @unique
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  products    Product[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  images      String[]
  status      ProductStatus @default(ACTIVE)
  vendor      User         @relation(fields: [vendorId], references: [id], name: "VendorProducts")
  vendorId    String
  subCategory SubCategory @relation(fields: [subCategoryId], references: [id])
  subCategoryId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sales       Sale[]
}

model Order {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  products  OrderItem[]
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
}

model Sale {
  id          String  @id @default(uuid())
  product     Product @relation(fields: [productId], references: [id])
  productId   String
  vendor      User    @relation(fields: [vendorId], references: [id])
  vendorId    String
  amount      Float
  createdAt   DateTime @default(now())
}

model AdminDashboard {
  id          String  @id @default(uuid())
  admin       User    @relation(fields: [adminId], references: [id])
  adminId     String
  totalUsers  Int
  totalRevenue Float
  createdAt   DateTime @default(now())
}

model VendorDashboard {
  id          String  @id @default(uuid())
  vendor      User    @relation(fields: [vendorId], references: [id])
  vendorId    String
  totalSales  Int
  totalRevenue Float
  createdAt   DateTime @default(now())
}

enum Role {
  BUYER
  VENDOR
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

enum ProductStatus {
  ACTIVE
  OUT_OF_STOCK
  DISCONTINUED
}

